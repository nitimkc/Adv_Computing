library(knitr)
library(rmarkdown)
rmarkdown::render("file_name.Rmd","html_document")
#lectures
set.seed(7851)
library(mvtnorm)
x <- rmvnorm(n=100, mean=c(1,5), sigma=1*diag(2))
plot(x[, 1], x[, 2], col = "blue", xlab = "PI-ratio", ylab = "solvency")
title("PI-Ratio and Solvency - drawn\n from Bivariate Normal Distribution")
#\n is used to indent/fit a title in more than one line.
# embedding fonts into our pdf figures
if (!require("extrafont"))
install.packages("extrafont")
library(extrafont)
loadfonts()
pdf("plot_embedded_fonts.pdf", family="Arial", width=4, height=4.5) #ERROR Arial not found
plot(x[, 1], x[, 2], col = "blue", xlab = "PIratio", ylab = "Solvency")
title("PI-Ratio and Solvency - drawn\nfrom Bivariate Normal Distribution")
dev.off()
embed_fonts("plot_embedded_fonts.pdf") #ERROR GhostScript
# how to install in mac
embed_fonts("plot_embedded_fonts.pdf") #ERROR GhostScript
# how to install in mac
if (output=="latex") {
opts_chunk$set(dev = 'cairo_pdf',
dev.args=list(family="Arial"))
}
#3. Plot the figure as usual
plot(x[, 1], x[, 2], col = "blue", xlab = "PIratio", ylab = "Solvency")
title("PI-Ratio and Solvency - drawn\nfrom Bivariate Normal Distribution")
## create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) { #sdX = std dev
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
#lectures
set.seed(7851)
library(mvtnorm)
x <- rmvnorm(n=100, mean=c(1,5), sigma=1*diag(2))
#sigma is 2x2 diagonal matrix with 1s as its diagonal entries
plot(x[, 1], x[, 2], col = "blue", xlab = "PI-ratio", ylab = "solvency")
title("PI-Ratio and Solvency - drawn\n from Bivariate Normal Distribution")
#\n is used to indent/fit a title in more than one line.
# embedding fonts into our pdf figures
if (!require("extrafont"))
install.packages("extrafont")
library(extrafont)
loadfonts()
# you would then embed fonts as follows
pdf("plot_embedded_fonts.pdf", family="Arial", width=4, height=4.5)
plot(x[, 1], x[, 2], col = "blue", xlab = "PIratio", ylab = "Solvency")
title("PI-Ratio and Solvency - drawn\nfrom Bivariate Normal Distribution")
dev.off()
if (output=="latex") {
opts_chunk$set(dev = 'cairo_pdf',
dev.args=list(family="Arial"))
}
#3. Plot the figure as usual
plot(x[, 1], x[, 2], col = "blue", xlab = "PIratio", ylab = "Solvency")
title("PI-Ratio and Solvency - drawn\nfrom Bivariate Normal Distribution")
## create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) { #sdX = std dev
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
sigmaXY(rho=-0.1, sdX=1, sdY=20)
sigmaXY(rho=0.8, sdX=2, sdY=30)
loanData <- function(noApproved, noDenied, muApproved, muDenied, sdApproved,
sdDenied, rhoApproved, rhoDenied, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied))
target = c(rep(0, noApproved), rep(1, noDenied))
loanDf <- data.frame(loanDf, deny, target)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "target")
return(loanDf)
}
# generating some data
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100),
c(1,20), c(2,30), -0.1, 0.6, 1221)
# specify font family
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
## illustrating the dependence of deny on PIratio variable
ggplot(data = loanDf,
aes(x = PIratio, y = target)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous("PIratio", limit = c(1, 16),
breaks = seq(1, 16, 1), expand = c(0, 0)) +
scale_y_continuous("deny", limit = c(-0.4, 1.8),
breaks = seq(-0.4, 1.8, 0.2),
expand = c(0, 0)) +
geom_hline(yintercept = 0, size = 0.3, linetype = 2) +
annotate("text", x = 13, y = 0.1, label = "Approved", family = "Arial") +
geom_hline(yintercept = 1, size = 0.3, linetype = 2) +
annotate("text", x = 3, y = 1.1, label = "Denied", family = "Arial") +
theme_bw() +
theme(text = element_text(family = "Arial"))
# running the linear regression on our dataset,
# but only on PI-Ratio variable and intercept
datafit <- lm(target ~ PIratio + 1, data = loanDf)
summary(datafit)
datafit <- lm(target ~ solvency + PIratio + 1, data=loanDf)
summary(datafit)
weights <- coef(datafit)[c("solvency", "PIratio")]
bias <- coef(datafit)[1]
# assigning labels
head(predict(datafit))
totaldeny <- sum(predict(datafit)>0.5)
## the boundary is a line.
intercept <- (-bias + 0.5)/weights["PIratio"]
slope <- -(weights["solvency"]/weights["PIratio"])
# illustrating the data, now with the boundary, we use geom_abline(),
# this will work only for lines
ggplot(data = loanDf, aes(x = solvency, y = PIratio,
colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("Weight") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_abline(intercept = intercept, slope = slope)
# when plotting, a more general solution is to use geom_line()
x <- seq(min(loanDf["PIratio"]), max(loanDf["PIratio"]),
length.out = nrow(loanDf))
y <- -(weights["PIratio"]/weights["solvency"])*x +
(0.5-bias)/weights["solvency"]
# careful, colnames have to match!
boundaryDf <- data.frame(PIratio=x, solvency=y,
deny=rep("Boundary", length(x)))
plotDiscFnc <- function() {
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw() +
geom_line(data=boundaryDf) +
scale_color_manual("",
values = c("Boundary" = "grey",
"Approved" = "blue", "Denied" = "red"))
}
plotDiscFnc()
##Confusion Matrix
noApproved <- 50; noDenied <- 50
loanDf <- loanData(noApproved, noDenied, c(8, 120), c(10, 100), c(1,20), c(2,30), -0.2, 0.6)
# optimizing
datafit <- lm(target ~ solvency + PIratio + 1, data=loanDf)
summary(datafit)
predictedLabels <- ifelse(predict(datafit) < 0.5, "Approved", "Denied")
# confusion matrices
confMatrixFreq <- table(loanDf$deny, predictedLabels)
confMatrixFreq
#frequency
confMatrixProp <- prop.table(confMatrixFreq, 1)
confMatrixProp
##Outliers
# adding some outliers
outlier <- data.frame(rep(12,10), c(400, 10), rep("Approved",10), rep(0,10))
colnames(outlier) <- colnames(loanDf)
loanDf <- rbind(loanDf, outlier)
# optimizing
datafit <- lm(target ~ solvency + PIratio + 1, data=loanDf)
summary(datafit)
# grabbing the coefficients
weights <- coef(datafit)[c("solvency", "PIratio")]
bias <- coef(datafit)[1]
# the boundary
x <- seq(min(loanDf["PIratio"]), max(loanDf["PIratio"]),
length.out = noApproved+noDenied)
y <- -(weights[2]/weights[1])*x + (0.5-bias)/weights[1]
boundaryDf2 <- data.frame(PIratio=x, solvency=y,
deny=rep("New Boundary", length(x)))
# plotting
ggplot(data = loanDf, aes(x = solvency, y = PIratio,
colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw(base_size = 14, base_family = "Helvetica") +
geom_line(data=boundaryDf) +
geom_line(data=boundaryDf2) +
scale_color_manual("deny",
values = c("New Boundary" = "black", "Boundary" = "grey",
"Approved" = "blue", "Denied" = "red"))
#######For more than two categories#######
noApproved <- 50; noDenied <- 50
loanDf <- loanData(noApproved, noDenied, c(7, 150), c(10, 100),
c(2,20), c(2,30), -0.5, 0.3)
#add target variable, coded in a particular way
loanDf <- cbind(loanDf,
target1 = c(rep(0, noApproved), rep(1, noDenied)),
target2 = c(rep(1, noApproved), rep(0, noDenied))
)
# analytical solution
X <- as.matrix(cbind(ind=rep(1, nrow(loanDf)),
loanDf[,c("PIratio", "solvency")]))
Y <- cbind(target1 = c(rep(0, noApproved), rep(1, noDenied)),
target2 = c(rep(1, noApproved), rep(0, noDenied))
)
weightsOptim <- solve(t(X)%*%X) %*% t(X) %*% Y
# compute predictions
predictions <- X %*% weightsOptim
head(predictions)
# classify according to the argmax criterion
denied <- (predictions==apply(predictions, 1, max))[,1]
predictedLabels <- ifelse(denied, "Denied", "Approved")
# classification algorithm performance
confMatrixFreq <- table(loanDf$deny, predictedLabels)
confMatrixFreq
confMatrixProp <- prop.table(confMatrixFreq, 1)
confMatrixProp
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(shiny)
sessionInfo()
sessionInfo()
library(shiny)
runExample("01_hello")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/rsconnect')
library(shiny)
shiny::runApp()
setwd("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shiny::runApp()
shiny::runApp()
library(shiny)
library("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='nitimkc',
token='88343C589BBDF5B8423E67B9F330C60E',
secret='10qYYYX/2v7GBnVL84JurZdAs1w8B1cjBOkpk8jF')
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shinyapps::deployApp("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shinyapps::deployApp("/Users/peaceforlives/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shinyapps::deployApp("C:/Users/peaceforlives/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shinyapps::deployApp('~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
devtools::install_github('rstudio/rsconnect')
rsconnect::deployApp(appName="app").
rsconnect::deployApp(appName="app")
shiny::runApp()
shiny::runApp()
shinyUI(
# we use a simple user layout
pageWithSidebar(
headerPanel(
# we use some custom HTML for the text above the application
HTML("<h1>Introduction to Shiny- Example Loan Data</h1><br>")
),
sidebarPanel(
wellPanel(
radioButtons("distType", "Distribution type:",
list("Discrete", "Continuous"),
selected="Discrete")
),
# this input is served based on distType input
wellPanel(
uiOutput("distName")
),
wellPanel(
numericInput("n","Sample size:",200),
# this input is served based on distName input
uiOutput("distPar1"),
uiOutput("distPar2")
),
wellPanel(
downloadButton("downloadPlot", "Download Figure")
)
),
mainPanel(
# illustrating tabset panel
tabsetPanel(
tabPanel("Plot", plotOutput("plot", height="auto")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table")),
tabPanel("About",includeMarkdown("includeSomeExternalText.md"))
)
)
)  # END of pageWithSidebar
) # END of shinyUI
shiny::runApp()
# Run the app
shiny::runApp()
devtools::install_github('rstudio/rsconnect')
# Run the app
shiny::runApp()
rsconnect::deployApp(appName="app")
setwd("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
setwd("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
shiny::runApp()
library(shiny)
library(devtools)
library(shinyapps)
shinyapps::deployApp('~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
wrtfun2<-reactive({
if (!is.null(input$var1))
setwd("~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app")
sink("outfile.txt")
cat(input$var1)
sink()
}
)
shinyapps::deployApp('~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
shiny::runApp("app")
shiny::runApp()
runApp("app")
shiny::runApp()
runApp("app")
library(shiny)
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
shinyapps::setAccountInfo(name='nitimkc',
token='88343C589BBDF5B8423E67B9F330C60E',
secret='10qYYYX/2v7GBnVL84JurZdAs1w8B1cjBOkpk8jF')
library(shinyapps)
shinyapps::deployApp('~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
library(shinyapps)
shinyapps::deployApp(appName = "myapp", '~/DATASCIENCE/2_Trimester/15D012ACM/problemSets/PS2/app')
shiny::runApp()
runApp("app")
getwd()
deployApp(appName="APP1")
runApp("myapp")
shiny::runApp()
shiny::runApp()
shiny::runApp('~/DATASCIENCE/2_Trimester/15D012ACM/resources/appDistributions')
shiny::runApp()
